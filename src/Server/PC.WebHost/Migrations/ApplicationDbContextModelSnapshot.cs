// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PC.Data.Data;

#nullable disable

namespace PC.WebHost.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PC.Data.Models.Accounts.BaseAzureAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BaseAzureAccount");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseAzureAccount");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PC.Data.Models.Article", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastEditedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastEditedById");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("PC.Data.Models.ArticlePlacementStudent", b =>
                {
                    b.Property<string>("ArticleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlacementId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ArticleId", "PlacementId", "StudentId");

                    b.HasIndex("PlacementId");

                    b.HasIndex("StudentId");

                    b.ToTable("ArticlePlacementStudentConfigurations");
                });

            modelBuilder.Entity("PC.Data.Models.Image", b =>
                {
                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ArticleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.HasKey("ImageUrl");

                    b.HasIndex("ArticleId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("PC.Data.Models.Placement", b =>
                {
                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.HasKey("Title");

                    b.ToTable("Placements");
                });

            modelBuilder.Entity("PC.Data.Models.Accounts.Student", b =>
                {
                    b.HasBaseType("PC.Data.Models.Accounts.BaseAzureAccount");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("PC.Data.Models.Accounts.User", b =>
                {
                    b.HasBaseType("PC.Data.Models.Accounts.BaseAzureAccount");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("PC.Data.Models.Article", b =>
                {
                    b.HasOne("PC.Data.Models.Accounts.User", "CreatedBy")
                        .WithMany("ArticlesCreated")
                        .HasForeignKey("CreatedById");

                    b.HasOne("PC.Data.Models.Accounts.User", "LastEditedBy")
                        .WithMany("ArticlesEdited")
                        .HasForeignKey("LastEditedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastEditedBy");
                });

            modelBuilder.Entity("PC.Data.Models.ArticlePlacementStudent", b =>
                {
                    b.HasOne("PC.Data.Models.Article", "Article")
                        .WithMany("ArticlePlacementStudents")
                        .HasForeignKey("ArticleId")
                        .IsRequired();

                    b.HasOne("PC.Data.Models.Placement", "Placement")
                        .WithMany("ArticlePlacementStudents")
                        .HasForeignKey("PlacementId")
                        .IsRequired();

                    b.HasOne("PC.Data.Models.Accounts.Student", "Student")
                        .WithMany("ArticlePlacementStudents")
                        .HasForeignKey("StudentId")
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Placement");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("PC.Data.Models.Image", b =>
                {
                    b.HasOne("PC.Data.Models.Article", "Article")
                        .WithMany("Images")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("PC.Data.Models.Article", b =>
                {
                    b.Navigation("ArticlePlacementStudents");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("PC.Data.Models.Placement", b =>
                {
                    b.Navigation("ArticlePlacementStudents");
                });

            modelBuilder.Entity("PC.Data.Models.Accounts.Student", b =>
                {
                    b.Navigation("ArticlePlacementStudents");
                });

            modelBuilder.Entity("PC.Data.Models.Accounts.User", b =>
                {
                    b.Navigation("ArticlesCreated");

                    b.Navigation("ArticlesEdited");
                });
#pragma warning restore 612, 618
        }
    }
}
